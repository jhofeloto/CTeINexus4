// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
enum UserRole {
  SUPERADMIN
  ADMIN
  RESEARCHER
  COMMUNITY
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(RESEARCHER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  projects Project[]
  products Product[]

  @@map("users")
}

enum ProjectStatus {
  PROPOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Project {
  id              String        @id @default(cuid())
  title           String
  summary         String        @db.Text
  keywords        String[]
  status          ProjectStatus @default(PROPOSED)
  proponentEntity String
  startDate       DateTime?
  endDate         DateTime?
  budget          Float?
  isPublic        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]
  attachments Attachment[]

  @@map("projects")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  summary     String   @db.Text
  description String?  @db.Text
  productUrl  String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  productTypeId String
  productType ProductType  @relation(fields: [productTypeId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@map("products")
}

model ProductType {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  quality     String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("product_types")
}

model Attachment {
  id        String   @id @default(cuid())
  url       String   // URL de Cloudinary
  fileName  String
  fileSize  Int?
  mimeType  String?
  createdAt DateTime @default(now())

  // Relations
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("attachments")
}